#-----------------------------------------------------------------------
# This is a file that is run by Github actions to test certain aspects
# of our code before we merge into master.
#
# Date last modified: Fri May 30 02:53:22 PM CDT 2025
#-----------------------------------------------------------------------
name: Continuous Integration for Rubric App

# Specifies to run on PRs set to merge into master
on:
  pull_request:
  push:
    branches:
      - master

# Front-end linting and back-end building are their own jobs
# since they arent dependent on each other.
jobs:
  # lint job builds the frontend and runs ESLint.
  lint:
    runs-on: ubuntu-latest
    steps:
      # Fetch job to see runner info
      - name: Display system info
        run:  |
          echo "CPU info:"
          lscpu
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('FrontEndReact/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: "npm"
          cache-dependency-path: FrontEndReact/package.json
        
      - name: Install Node dependencies
        run:  |
          cd FrontEndReact
          npm install
      
      - name: Run ESLint
        run:  |
          cd FrontEndReact
          npx eslint --max-warnings=0 .

  backend:
  # Builds the backend and validates that its running.
    runs-on: ubuntu-latest
    steps:
      # Fetch job to see runner info
      - name: Display system info
        run:  |
          echo "CPU info:"
          lscpu
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Restore backend Docker cache (Improves `docker compose` speed)
      - name: Restore Docker layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker-cache
          key: ${{ runner.os }}-docker-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build backend
        run: docker compose build backend --no-cache
      
      - name: Validate backend image
        run:  docker images | grep backend || (echo "Error = Backend image not found" && exit 1)
        # TODO: Run pytests here using docker compose run or something
      
      # Note that any error will immediatly trigger the contianer to be shut down.
      # Start backend and check its health.
      - name: Start backend
        run: docker compose up --no-build --detach backend

      - name: Setup logs
        if: always()
        run:  |
            docker ps  # Check if container is running
            docker compose logs backend  # Check backend logs

      - name: Dependency check
        run:  |
            echo "Checking for broken or missing dependencies..."
            pip check
            echo "Checking for differing libs from the requirement.txt"
            echo "[<] indicates a missing lib from the requirements.txt"
            diff <(awk -F '==' '{print $1}' BackEndFlask/requirements.txt | sort) <(pip freeze | awk -F '==' '{print $1}' | sort) | grep '^<' || true
        continue-on-error: true

      - name: Backend health check
        run:  |
            sleep 7
            echo "Checking backend health..."
            for i in {1..5}; do 
              docker inspect --format='{{json .State.Status}}' $(docker ps -q --filter "name=backend")
              netstat -tulpn | grep 5050  # Check if port is actually listening

              if curl -v 'http://127.0.0.1:5050/api'; then
                echo "Backend is running and reachable"
                exit 0
              fi

              echo "Backend is not ready, retrying..."
              sleep 3
            done
            echo "Failed to reach backend via curl"
            exit 1

      # Silent shutdown to prevent it from messing with other jobs
      - name: Cleanup backend on failure
        if: failure()
        run: docker compose stop backend
  
  validate:
  # runs the jest tests once everything has show to work as expected.
    runs-on: ubuntu-latest
    needs:
      - lint
      - backend
    steps:
      # Fetch job to see runner info
      - name: Display system info
        run:  |
          echo "CPU info:"
          lscpu
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('FrontEndReact/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node dependencies
        run: |
          cd FrontEndReact
          npm install

      - name: Verify React Scripts
        run: |
          cd FrontEndReact
          npm list react-scripts || npm install react-scripts --save-dev

      - name: Verify Node.js instalation
        run: node -v

      # Restore backend Docker cache (Improves `docker compose` speed)
      - name: Restore Docker layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker-cache
          key: ${{ runner.os }}-docker-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-docker-
            docker compose backend

      - name: Run Jest tests
        run:  |
          cd FrontEndReact
          npm test -- --all --cacheDirectory /tmp/jest-cache
        # See FrontEndReact/jest-ci-setup.js for the rationale behind the --setupFiles ./jest-ci-setup.js hack
        # The ./node_modules/react-app-polyfill/jsdom.js setup file is enabled by default, but
        #  using any setupFiles args overrides the defaults so I have to add it
        #  manually
        env:
          REACT_APP_API_URL: "http://127.0.0.1:5050/api"
