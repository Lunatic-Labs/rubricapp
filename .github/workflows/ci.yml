#-----------------------------------------------------------------------
# This is a file that is run by Github actions to test certain aspects
# of our code before we merge into master.
#
# Date last modified: Tue Jun  3 12:30:35 PM CDT 2025
#-----------------------------------------------------------------------
name: Rubric App Continuous Integration

# Specifies to run on PRs set to merge into master
on:
  pull_request:
  push:
    branches:
      - master

# Front-end linting and back-end building are their own jobs
# since they arent dependent on each other.
jobs:
  # lint job builds the frontend and runs ESLint.
  lint:
    runs-on: ubuntu-latest
    steps:
      # Fetchs runner info to see what we are working with.
      - name: Display system info
        run:  |
          echo "CPU info:"
          lscpu
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h

      # Loads files for the runner.
      - name: Checkout code
        uses: actions/checkout@v4

      # Sets up node and runner cache.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: "npm"
          cache-dependency-path: FrontEndReact/package.json

      # Retrives/Setup frontend cache.
      - name: Cache npm dependencies directly
        uses: actions/cache@v3
        with:
          path: FrontEndReact/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('FrontEndReact/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
        
      - name: Install Node dependencies
        run:  |
          cd FrontEndReact
          npm install
      
      # Main part where frontend independent tests should be added.
      - name: Run ESLint
        run:  |
          cd FrontEndReact
          npx eslint --max-warnings=0 .

  backend:
  # Builds the backend and validates that its running and accepting connections.
    runs-on: ubuntu-latest
    steps:
      # Fetchs runner info
      - name: Display system info
        run:  |
          echo "CPU info:"
          lscpu
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h

      # Loads files for runner.
      - name: Checkout
        uses: actions/checkout@v4
      
      # Sets up the docker builder.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Retrives/Setup backend docker cache.
      - name: Restore Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # If cache is found, loads it for docker.
      - name: Build Docker Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build backend
        run: docker compose build backend
      
      # Main part where backtend independent tests should be added.
      - name: Validate backend image
        run:  docker images | grep backend || (echo "Error = Backend image not found" && exit 1)
      
      - name: Start backend
        run: docker compose up --no-build --detach backend

      # Ensuring that logs are always set up despite any potential startup errors.
      - name: Setup logs
        if: always()
        run:  |
            docker ps  # Check if container is running
            docker compose logs backend  # Check backend logs

      # Prints out different libs that the runner is working without 
      - name: Dependency check
        run:  |
            echo "Checking for broken dependencies..."
            pip check
            echo "Generating current dependencies..."
            docker exec rubricapp-backend-1 pip freeze  > temp_dependencies.txt
            echo "Checking for differing libs from the requirements.txt"
            echo "NOTE: difflib is used to figure out dependencies. It does fail sometimes, so compare with the dump."
            python3 .github/workflows/workflow_dependencies.py
            echo "removing temp_dependencies.txt"
            rm -f temp_dependencies.txt
        continue-on-error: true
        # Note that this is built so that sytnax faliure does not indicate a canceled workflow.

      # Retries to curl into the backend 3 times.
      - name: Backend health check
        run:  |
            sleep 7
            echo "Checking backend health..."
            for i in {1..5}; do 
              docker inspect --format='{{json .State.Status}}' $(docker ps -q --filter "name=backend")
              netstat -tulpn | grep 5050  # Check if port is actually listening

              if curl -v 'http://127.0.0.1:5050/api'; then
                echo "Backend is running and reachable"
                exit 0
              fi

              echo "Backend is not ready, retrying..."
              sleep 3
            done
            echo "Failed to reach backend via curl"
            exit 1

      # Silent shutdown to prevent it from messing with other jobs
      - name: Cleanup backend on failure
        if: failure()
        run: docker compose stop backend

  run_backend_tests:
    # This runs the backend tests.
    runs-on: ubuntu-latest
    needs:
      - backend
    steps:
      # Fetchs runner info
      - name: Display system info
        run:  |
          echo "CPU info:"
          lscpu
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h

      # Same docker build and start up code as above.
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build backend
        run: docker compose build backend      

      - name: Replace dockerfile backend to tigger testing
        shell: bash
        run: |
          FILE="Dockerfile.backend"
          NEW_LINE='CMD ["python", "setupEnv.py", "-dt"]'
          sed '$d' "$FILE" > temp.txt
          echo "$NEW_LINE" >> temp.txt
          mv temp.txt "$FILE"

      - name: Start backend
        run: docker compose up --no-build --detach backend    

      - name: Wait for backend to stop
        run: |
          docker events --filter 'container=backend' --filter 'event=die' --until '600s'
  

  
  validate_frontEnd_works_with_backend:
  # runs the jest tests once everything has show to work as expected.
    runs-on: ubuntu-latest
    needs:
      - lint
      - backend
    steps:
      # Fetchs runner info
      - name: Display system info
        run:  |
          echo "CPU info:"
          lscpu
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h

      # Same docker build and start up code as above.
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.backend
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build backend
        run: docker compose build backend      

      - name: Start backend
        run: docker compose up --no-build --detach backend      

      # Gives the backend time to get fully set up.
      - name: Pause
        run: sleep 7

      # Same frontend build/startup code as above.
      - name: Cache npm dependencies directly
        uses: actions/cache@v3
        with:
          path: FrontEndReact/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('FrontEndReact/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        run: |
          cd FrontEndReact
          npm install

      - name: Verify React Scripts
        run: |
          cd FrontEndReact
          npm list react-scripts || npm install react-scripts --save-dev

      - name: Verify Node.js instalation
        run: node -v
  
      # Main section where more testing can be added that requires the frontend and backend running.\
      - name: Run Jest tests
        run:  |
          cd FrontEndReact
          npm test -- --all --cacheDirectory /tmp/jest-cache
        # See FrontEndReact/jest-ci-setup.js for the rationale behind the --setupFiles ./jest-ci-setup.js hack
        # The ./node_modules/react-app-polyfill/jsdom.js setup file is enabled by default, but
        #  using any setupFiles args overrides the defaults so I have to add it
        #  manually
        env:
          REACT_APP_API_URL: "http://127.0.0.1:5050/api"
